IMPORTANT! THE ARGUMENTS IN THE REQUESTS MUST BE SPECIFIED IN STRICT ORDER, IN ACCORDANCE WITH HOW DESCRIBED BELOW

(GET) "/api/balance/" - current token balance
Arguments:
1)address - account address
2)token - the short name of the token (its abbreviation)
Request example:
/api/balance/?address=57LkviK66Hfx8TmSc3CzwQ66omHcqTAa1dKNKC7eTsJK&token=ORBC
Returns:
"wallet" - the account address
"token" - the short name of the token (its abbreviation)
"balance" - the current balance of the token

(GET)"/api/create/cryptocontainer/" - creating a new cryptocontainer
Arguments:
1)pass - password (at least 6 characters)
Request example:
/api/create/cryptocontainer/?pass=123123
Returns:
"address" is the address of the created cryptographic
container "words" - 47 words for restoring the created cryptographic container. Save them and don't tell anyone!

(GET) "/api/create/transaction/" - Create transaction
Arguments:
1)address - wallet address
2)pass - password
3)to - address of the recipient account
4)symbol - the short name of the token (abbreviation)
5)amount - quantity
Request example:
/api/create/transaction/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&pass=123123&to=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&token=ORBC&amount=12
Returns:
In case of successful creation of the transaction:
"success" = True - the success of the creation of the transaction
"owner_sign" - the hash of the transaction signed with the private key of the creator of the transaction
In case of an error:
"success" = False
"error" - description of the error (insufficient funds, non-existent token, etc.)

(GET) "/api/check/transaction/" - Checking the transaction status
Arguments:
1)owner_sign - transaction hash signed with the private key of the transaction creator
Request example:
/api/check/transaction/?owner_sign=2p3e8kpdTwRgbjVbfb9BCKGToQ3eizFkKYY2e3rvYDG9jAL8apT7PQKeP7Wnix87345Sb3riYKMA2rdnrDjYs7X
Returns:
If a transaction has been confirmed:
status = "confirmed"
"owner_sign" hash transactions signed by private key of the originator of the transaction
"unix_time" - the date and time of the transaction(in Unix format)
"from" address for the account of the sender
"to" address for the account of the recipient
"amount" - the amount of the transferred funds
"token" token(short name)
If a transaction with the specified hash does not exist or has not yet been confirmed:
"status" = "not confirmed or does not exist"

(GET) "/api/create/token/" - Token creation
Arguments:
1)address - wallet address
2)pass - password
3)name - the full name of the token(not more than 32 characters, spaces and signs not allowed)
4)symbol - the short name of the token(abbreviation from 2 to 4 Latin letters, spaces and signs not allowed)
5)emission is the maximum amount of output(a positive integer more than 1 second)
6)capacity - bit depth (number of decimal places, from 2 to 8 inclusive)
Request example:
/api/create/token/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&pass=123123name=ORBISCoin&symbol=ORBC&emission=21000000&capacity=5
Returns:
In case of successful token creation:
"success" = True - the success of the transaction creation
"name" - the full name of the created token
"symbol" - the short name of the created token
"emission" - the maximum volume of issue of the created token
"capacity" - the bit depth of the created token
In case of error:
"success" = False
"error" - error description (such token already exists, etc.)

(GET) "/api/buy/OM/" - purchase OM
Attention! Before executing the command, make sure that you are no longer an OM holder and that there is enough ORBC in your account to purchase it (1 OM = 10000 ORBC)
Arguments:
1)address - wallet address
2)pass - password
Request example:
/api/buy/OM/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&pass=123123
Returns:
In case of a successful purchase of OM:
"success" = True - the success of the purchase of OM
In case of error:
"success" = False
"error" - error description (failed to log in to the wallet, OM has already been purchased, insufficient ORBC for purchase, etc.)

(GET) "/api/checkom/" - checking whether the specified account is an OM holder
Arguments:
1)address - account address
Request example:
/api/checkom/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup
Returns:
"success" - the success of processing the request
"om_holder" - the Boolean value of OM ownership of the specified account
If success = false:
"error" - error description(a non-existent address is specified, etc.)

(GET)"/api/create/service/" - Creating a service
Arguments:
1)address - wallet address
2)pass - password
3)name - the unique name of the service (length from 1 to 32 characters. Only Latin letters and signs (excluding &). Must begin with a Latin letter. Case matters)
Request example:
/api/create/service/?address=37tBiV8btkNUHTk6Q9bnYZRVyW7XWSseWw4REtsznWgS&pass=123123&name=My$ervIce
Returns:
In case of successful creation of the service:
"result" = True - the success of the creation of the service
In case of an error:
"result" = False
"error" - error description (failed to log in to the wallet, a service with that name already exists, incorrect service name, etc.)

(GET)"/api/service/set_data/" - Writing data to the service
Arguments:
1)address - wallet address
2)pass - password
3)name - the name of the service
4)data - data in the form of a set of bytes (no more than 100 bytes, in Base64 encoding)
Request example:
/api/service/set_data/?address=37tBiV8btkNUHTk6Q9bnYZRVyW7XWSseWw4REtsznWgS&pass=123123&name=My$ervIce&data=0KXRg9C70Lgg0YLRg9GCINGC0LDQuiDQvNCw0LvQvj8g0K3RgtC+INC90LDRiNCwINGC0L7Rh9C60LAg0LHQu9GP0YLRjCEg0KLRiyDQvdCwINC/0LXQvdGR0Log0YHQtdC70L
Returns:
If the data is successfully written to the service:
"result" = True - success of data recording
In case of an error:
"result" = False
"error" - error description (a service with this name does not exist, an incorrect service name, etc.)

(GET)"/api/service/get_data/" - Reading data from the service
Arguments:
1)name - the name of the service
Request example:
/api/service/get_data/?name=My$ervIce
Returns:
In case of an error:
"result" = False
"error" - error description (a service with this name does not exist, etc.)
In case of successful reading of data from the service:
"result" = True - data read success
"data_array" is an array of data from the service, each element of which has the following fields:
"id" - ID of the account that created the record in the service
"unix_time" - date and time of creation of the record (in Unix format)
"data" - recorded data (in ANSI encoding)

(GET)"/api/service_info/" - Request for service data
Arguments:
1)name - the name of the service
Request example:
/api/create/service/?name=My$ervIce
Returns:
In case of a successful request:
"result" = True
"name" - name of the service
"owner_id" - ID of the account-creator of the service
"unix_time" - date and time of creation of the service (in Unix format)
In case of an error:
"result" = False
"error" - error description (a service with this name does not exist, etc.)

(GET) "/api/address_balances/" - Request data about account tokens with their current balance
Arguments:
1)address - account address
Request example:
/api/address_balances/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup
Returns:
"balances" - an array of the following pairs:
"symbol" - the short name of the token (abbreviation)
"value" - the current balance of the token

(GET)"/api/restore/cryptocontainer/keys/" - Restore the cryptocontainer with 47 words
Arguments:
1)keys - a list of keys (enumeration with underscores)
2)pass - a new password to access the recoverable cryptographic container
Request example:
/api/restore/cryptocontainer/keys/?keys=GRASS_JOIN_FRUIT_VIRUS_COIL_KNOW_HINT_WILL_HOVER_TRULY_PIGEON_PHONE_BROOM_NOSE_BUBBLE_TICKET_INCREASE_INTO_WISDOM_MINUTE_OMIT_MERGE_DESIGN_KIWI_BICYCLE_PELICAN_RAW_FALSE_EXTEND_MISS_RAIN_FUEL_MOUSE_MUSIC_MIMIC_STYLE_DOOR_SPEED_SEMINAR_ELDER_SONG_MASTER_ELECTRIC_RETREAT_FESTIVAL_SPATIAL_WOMAN&pass=111111
Returns:
"success" - the success of the operation
"address" - the address of the recovered cryptographic container (in the case of "success" = "true")

(GET)"/api/address_info/" - Request data about a specific account with the number of transactions for the specified tokens
Arguments:
1)address - account address
2)tokens - a list of tokens (enumeration through underscores), or "all" to select all tokens.
Request example:
/api/address_info/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&tokens=TOROM_QUIPA_FOLEX
/api/address_info/?address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&tokens=all
Returns:
"address" - account address
"id" - account id
"trans_count" - the total number of transactions for the specified tokens
"tokens_count" - the total number of tokens in an account with a positive current balance
If one token is specified, then the server response is supplemented with 3 more fields:
"received" - total tokens received
"sent" - total tokens sent
"balance" - the balance of the token at the moment
"symbol" - the short name of the token (abbreviation)

(GET)"/api/address_info_details/" - Request for a list of transactions or account tokens for a specified period of time (with "pagination" of the server response)
Arguments:
1)tab - specifying the subject for the list of data ("transactions" or "tokens")
2)address - account address
3)tokens - a list of tokens (enumeration through underscores), or "all" to select all tokens
4)page - page
5)pagesize - the dimension of the list page (the amount of data on one page)
6)date_from - the start date of the period (in the format dd.mm.yyyy_h:mm:ss); default is 30.12.1899; for tab = "tokens" the value is ignored
7)date_to - date of the end of the period (in the format dd.mm.yyyy_h:mm:ss); by default is equal to this point in time; for tab = "tokens", the value is ignored
8)type - transaction type ("incoming","outgoing", "all"); default is "all"; for tab = "tokens" the value is ignored

3 variations of the request:
1st option: the arguments tab,address,tokens,page,pagesize are specified
Request example:
/api/address_info_details/?tab=tokens&address=8QjFv11MGJrZcmaxfp8RRER5aJEB3fLokZdYk78Fdqup&tokens=all&page=1&pagesize=10
Returns a list of the specified tokens that appear in the account's transaction history for the entire time
